{"version":3,"sources":["components/common/cookies.js","components/common/auth-states.js","components/common/app-store.js","components/common/material-ui-styles.js","components/auth/cognito-config-controller.js","components/auth/custom-sign-out.js","components/header.js","components/footer.js","components/auth/custom-authenticator.js","components/common/config.js","components/widgets/json-viewer.js","components/widgets/widget.js","components/widgets/user-info.js","components/widgets/region-selector.js","components/widgets/ec2-describe-instances.js","components/widgets/aws-cli-proxy.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","authStates","appStore","store","Auth","cognito","authState","undefined","updateAuthState","newAuthState","loggedIn","config","userPoolId","clientId","identityPoolId","region","checkConfigIsComplete","console","log","configIsComplete","configureAuth","configErrorMessage","username","password","accessToken","loadedCookies","loadStateFromCookies","cookieValues","getAll","saveStateToCookies","set","Amplify","configure","userPoolWebClientId","mandatorySignIn","authenticationFlowType","err","message","useStyles","makeStyles","theme","root","display","title","flexGrow","appBarHeader","zIndex","drawer","footer","textAlign","width","flexShrink","drawerHeaderContainer","drawerPaper","drawerContainer","overflow","content","padding","spacing","widgetContainer","p","CognitoConfigController","view","useState","showConfig","setShowConfig","toggleShowConfig","Fragment","Grid","item","Button","onClick","color","variant","CognitoConfigureDialog","showDialog","toggleDialog","dialogValues","setDialogValues","updateDialogValue","key","value","newValues","Object","assign","closeDialogWithoutSave","closeDialog","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","onChange","ev","target","fullWidth","DialogActions","CustomSignOut","signOut","error","Header","classes","AppBar","position","className","Toolbar","Typography","Footer","Container","Box","CustomAuthenticator","hide","SignOut","Greetings","onStateChange","Config","awsCliFunctionName","JsonViewer","jsonObject","collapseStringsAfterLength","collapsed","style","src","Widget","children","Paper","elevation","m","UserInfo","currentCredentials","then","credentials","RegionSelector","setFunction","menuItems","map","MenuItem","Select","event","Ec2DescribeInstances","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","Reservations","results","setResults","setRegion","useEffect","a","ec2","EC2","essentialCredentials","reservations","params","describeInstances","promise","response","concat","NextToken","stack","fetchData","AwsCliProxy","isLoaded","setIsLoaded","cliCommand","setCliCommand","awsCliLambdaFunctionName","functionName","lambda","Lambda","payload","commandToRun","FunctionName","Payload","JSON","stringify","invoke","data","name","parse","commandResult","e","multiline","rowsMax","whiteSpace","Body","SignedInBody","SignInBody","displayType","widgets","component","displayName","displayOnFirstLoad","defaultCheckboxStates","checkboxState","setCheckboxState","AppDrawer","handleToggle","index","newCheckboxState","widget","React","createElement","Drawer","paper","List","labelId","ListItem","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","Divider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.41e9b38a.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\nconst cookies = new Cookies(); \nexport default cookies;","const authStates = {\n  signIn: 'signIn',\n  signedIn: 'signedIn',\n  forgotPassword: 'forgotPassword',\n  signUp: 'signUp',\n  confirmSignup: 'confirmSignup'\n};\n\nexport { authStates };","import Amplify, { Auth } from 'aws-amplify';\nimport { store } from '@risingstack/react-easy-state';\n\nimport cookies from './cookies';\nimport { authStates } from './auth-states';\n\n\nconst appStore = store({\n  // \"Auth\" is the Cognito Auth object; we have to congfigure it before use, and\n  // rather than configuring it separately in each component, we configure it in\n  // one place (our appStore state) and use it where needed.\n  Auth: Auth,\n\n  cognito: {\n    authState: undefined,\n\n    // When authState changes in other componnents, we call this function:\n    updateAuthState: (newAuthState) => {\n      appStore.cognito.loggedIn = (newAuthState === authStates.signedIn);\n      appStore.cognito.authState = newAuthState;\n    },\n\n    // The user populates these values using the UI (and/or they are pulled from cookies from prior configs)\n    config: {\n      userPoolId: '',\n      clientId: '',\n      identityPoolId: '',\n      region: ''  \n    },\n\n    // We call this each time the user opens and subsequently closes the config dialog box in the UI.\n    checkConfigIsComplete: () => {\n\n      if (appStore.cognito.config.userPoolId\n        && appStore.cognito.config.clientId\n        && appStore.cognito.config.identityPoolId\n        && appStore.cognito.config.region\n      ) {\n        // If the configuration is complete, we need to immediately call  \n        // Amplify.configure() before we render any components that rely on \n        // on Amplify's { Auth } components:\n        console.log('Cognito config is complete.');\n        appStore.cognito.configIsComplete = true;\n        appStore.configureAuth();\n      }\n      else {\n        console.log('Cognito config is not complete.')\n        appStore.cognito.configIsComplete = false;\n        appStore.cognito.configErrorMessage = 'Cognito configuration is incomplete.';\n      }\n    },\n    configIsComplete: false,\n    configErrorMessage: null,\n    loggedIn: false,\n    username: '',\n    password: '',\n    accessToken: {},              // this will later be populated upon successful login\n    loadedCookies: false          // used to make sure we only try to load settings from cookies once\n  },\n  loadStateFromCookies: () => {\n    // We call this function upon app's first load to see if we have previously-saved values: \n    if (!appStore.loadedCookies) {\n      const cookieValues = cookies.getAll();\n      console.log('Loaded cookies:', cookieValues);\n      appStore.cognito.username = cookieValues.username || '';\n      appStore.cognito.config.userPoolId = cookieValues.userPoolId || '';\n      appStore.cognito.config.clientId = cookieValues.clientId || '';\n      appStore.cognito.config.identityPoolId = cookieValues.identityPoolId || '';\n      appStore.cognito.config.region = cookieValues.region || ''; \n      appStore.loadedCookies = true;\n      appStore.cognito.checkConfigIsComplete();\n    }\n  },\n  saveStateToCookies: () => {\n    cookies.set('userPoolId', appStore.cognito.config.userPoolId);\n    cookies.set('clientId', appStore.cognito.config.clientId);\n    cookies.set('identityPoolId', appStore.cognito.config.identityPoolId);\n    cookies.set('region', appStore.cognito.config.region);\n    console.log(`Saved config to cookies:`, appStore.cognito.config);\n  },\n  /*clearLoginSession: () => {\n    // Not sure if we're actually using this function???\n    console.log('Auth session cleared.');\n    appStore.loggedIn = false;\n    appStore.accessToken = {};\n  },*/\n  configureAuth: () => {\n    try {\n      Amplify.configure({\n        Auth: {\n          identityPoolId: appStore.cognito.config.identityPoolId,\n          region: appStore.cognito.config.region,\n          userPoolId: appStore.cognito.config.userPoolId,\n          userPoolWebClientId: appStore.cognito.config.clientId,\n          mandatorySignIn: true,\n          authenticationFlowType: 'USER_SRP_AUTH',\n        }\n      });\n      console.log('Successfully configured Amplify Auth.');\n      appStore.cognito.configErrorMessage = null;\n    }\n    catch (err) {\n      console.log(`Failed to configure Amplify Auth: ${err}`);\n      appStore.cognito.configErrorMessage = err.message;\n      appStore.cognito.configIsComplete = false;\n    }\n   \n  }\n});\n\n// When first loaded, let's get initial values from cookies (if available)\nappStore.loadStateFromCookies();\n\nexport default appStore;","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBarHeader: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  footer: {\n    textAlign: 'center'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerHeaderContainer: {\n    textAlign: 'center',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(1),\n  },\n  widgetContainer: {\n    p: 4\n  }\n}));\n\nexport default useStyles;","import React, { useState } from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport appStore from '../common/app-store';\n\nconst CognitoConfigController = view(() => {\n\n  const [showConfig, setShowConfig] = useState(false);\n\n  const toggleShowConfig = () => {\n    setShowConfig(!showConfig);\n  }\n  \n  return (\n    <React.Fragment>\n      <Grid item>\n      <Button onClick={toggleShowConfig} color=\"primary\" variant=\"contained\">\n        Configure Cognito\n      </Button>\n    </Grid>\n      <CognitoConfigureDialog\n          showDialog={showConfig}\n          toggleDialog={toggleShowConfig} \n      />\n    </React.Fragment>\n  );\n});\n\nconst CognitoConfigureDialog = view(({ showDialog, toggleDialog }) => {\n\n  const [dialogValues, setDialogValues] = useState(appStore.cognito.config);\n\n  function updateDialogValue(key, value) {\n    // We have to copy the object rather than just use its pointer\n    let newValues = Object.assign({}, dialogValues);\n    newValues[key] = value;\n    setDialogValues(newValues);\n  }\n\n  function closeDialogWithSave() {\n    appStore.cognito.config = dialogValues;    \n    appStore.saveStateToCookies();\n    console.log('Wrote cognito config to appStore:', dialogValues);\n    appStore.cognito.checkConfigIsComplete();\n    closeDialog();\n  }\n\n  function closeDialogWithoutSave() {\n    setDialogValues(appStore.cognito.config);\n    closeDialog();\n  }\n\n  function closeDialog() {\n    toggleDialog();\n  }\n\n  return (\n    <Dialog open={showDialog} onClose={closeDialogWithoutSave} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Cognito Configuration</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          In order to log in to your Cognito User Pool, please enter the required information below:\n          </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"userPoolId\"\n          label=\"Cognito User Pool ID\"\n          onChange={ev => updateDialogValue('userPoolId', ev.target.value)}\n          value={dialogValues.userPoolId}\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"clientId\"\n          label=\"Cognito Client ID\"\n          onChange={ev => updateDialogValue('clientId', ev.target.value)}\n          value={dialogValues.clientId}\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"identityPoolId\"\n          label=\"Cognito Identity Pool ID\"\n          fullWidth\n          onChange={ev => updateDialogValue('identityPoolId', ev.target.value)}\n          value={dialogValues.identityPoolId}\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"region\"\n          label=\"Cognito AWS Region\"\n          fullWidth\n          onChange={ev => updateDialogValue('region', ev.target.value)}\n          value={dialogValues.region}\n        />\n      </DialogContent>\n       <DialogActions>\n        <Button onClick={closeDialogWithoutSave} color=\"primary\">\n          Cancel\n          </Button>\n        <Button onClick={closeDialogWithSave} color=\"primary\">\n          Save\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );\n});\n\nexport default CognitoConfigController; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport Button from '@material-ui/core/Button';\n\nimport appStore from '../common/app-store.js';\n\nconst CustomSignOut = view(() => {\n  \n  const signOut = () => {\n    try {\n      appStore.Auth.signOut();\n    } catch (error) {\n      console.log('error signing out: ', error);\n    }\n  };\n  \n  return (\n    <div>\n      <Button variant=\"contained\" color=\"primary\" onClick={signOut}>\n        Sign Out\n      </Button>\n    </div>\n  );\n});\n  \nexport default CustomSignOut; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport appStore from './common/app-store.js';\nimport useStyles from './common/material-ui-styles.js';\nimport CognitoConfigController from './auth/cognito-config-controller';\nimport CustomSignOut from './auth/custom-sign-out';\n\n\nconst Header = view(() => {\n  \n  const loggedIn = (appStore.cognito.loggedIn);\n\n  const classes = useStyles();\n\n  return (\n\n    <AppBar position=\"fixed\" className={classes.appBarHeader}>\n      <Toolbar>\n\n        <Typography variant=\"h6\" className={classes.title}>\n          Amazon Cognito UI Tool\n        </Typography>\n\n        {!loggedIn ?\n            <CognitoConfigController />\n          :\n            <CustomSignOut/>\n        }\n\n      </Toolbar>\n    </AppBar>\n  );\n\n});\n\nexport default Header; ","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\n\nimport useStyles from './common/material-ui-styles.js';\n\nfunction Footer() {\n\n  const classes = useStyles();\n\n\n  return (\n    <Container className={classes.footer}>\n       <Box>\n          These works are solely my own and not those of my employer.\n          <br />\n          Copyright © Mat Werber\n      </Box>\n    </Container>\n   \n  );\n\n   /*\n\n  return (\n    <div className={classes.appBarFooter}>\n        These works are solely my own and not necessarily those of my employer.\n         <br />\n         Copyright © Mat Werber\n    </div>\n  );\n  */\n \n}\n\nexport default Footer; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport {\n  Authenticator,\n  Greetings,\n  SignOut,\n} from 'aws-amplify-react';\n\n\nconst CustomAuthenticator = view(({ updateAuthState }) => {\n\n  return (\n    <Authenticator\n      hide={[\n        SignOut,\n        Greetings\n      ]}\n      onStateChange={(authState) => {\n        updateAuthState(authState);\n      }} \n    />   \n  );\n});\n  \nexport default CustomAuthenticator; ","const Config = {\n  awsCliFunctionName: 'aws-cli-lambda-proxy-AwsCliProxyFunction-12BRX5NGRPX65'\n};\n\nexport default Config;","import React from 'react';\nimport ReactJson from 'react-json-view';\nimport { view } from '@risingstack/react-easy-state';\n\n// Nifty tool for nice visualization of json objects:\nconst JsonViewer = view(({ jsonObject, collapseStringsAfterLength }) => {\n\n  const customStyle = {\n    'textAlign': 'left',\n  };\n\n  return (\n    <ReactJson\n      theme='twilight'\n      collapseStringsAfterLength={collapseStringsAfterLength || 30 }\n      collapsed={1}\n      style={customStyle}\n      src={jsonObject}\n      />\n  );\n\n});\n\nexport default JsonViewer; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\n\nconst Widget = view(({ children }) => {\n  return (\n    <Container>\n      <Paper elevation={3}>\n        <Box p={2} m={1}>\n          {children}\n        </Box>\n      </Paper>\n    </Container>\n  );\n});\n\nexport default Widget; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport { Auth } from 'aws-amplify';\n\nimport appStore from '../common/app-store';\nimport JsonViewer from './json-viewer';\nimport Widget from './widget.js';\n\nconst UserInfo = view(() => {\n\n  Auth.currentCredentials()\n    .then(credentials => {\n      appStore.cognito.currentCredentials = credentials;\n    });\n\n  return (\n    <Widget>\n      <h2>Authentication Info</h2>\n      <JsonViewer jsonObject={appStore.cognito.currentCredentials} />\n    </Widget>\n  );\n});\n\nexport default UserInfo; ","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst RegionSelector = view(({ value, setFunction }) => {\n\n  const regions = [\n    \"ap-south-1\",\n    \"ap-northeast-1\",\n    \"ap-northeast-2\",\n    \"ap-northeast-3\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"eu-north-1\",\n    \"eu-west-1\",\n    \"eu-west-2\",\n    \"eu-west-3\",\n    \"eu-central-1\",\n    \"us-west-1\",\n    \"us-west-2\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-central-1\",\n    \"sa-east-1\",\n    \"ca-central-1\",\n  ];\n\n\n  const menuItems = regions.map((region) => \n    <MenuItem key={region} value={region}>{region}</MenuItem>\n  );\n\n  function onChangeHandler(event) {\n    setFunction(event.target.value);\n  }\n\n  return (\n    <Select\n    value={value}\n    onChange={onChangeHandler}\n  >\n    {menuItems}\n  </Select>\n  );\n\n});\n\nexport default RegionSelector; ","import React, { useState, useEffect } from 'react';\nimport EC2 from 'aws-sdk/clients/ec2';\n\nimport appStore from '../common/app-store.js';\nimport JsonViewer from './json-viewer';\nimport RegionSelector from './region-selector';\nimport Widget from './widget.js';\n\nconst Ec2DescribeInstances = () => {\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n  const [results, setResults] = useState({ Reservations: [] });\n  const [region, setRegion] = useState('us-east-2');\n\n  // When component loads, fetch data once:\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        var credentials = await appStore.Auth.currentCredentials();\n        const ec2 = new EC2({\n          region: region,\n          credentials: appStore.Auth.essentialCredentials(credentials)\n        });\n        var reservations = [];\n        var params = {};\n        \n        do {\n          var response = await ec2.describeInstances(params).promise();\n          reservations = reservations.concat(response.Reservations);\n          params.NextToken = response.NextToken || null;\n        } while (params.NextToken);\n    \n        setResults({ Reservations: reservations });\n        setIsLoading(false);\n      }\n      catch (err) {\n        console.log(err, err.stack);\n        setErrorMessage(`${err}`);\n        setIsError(true);\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, [region]);\n\n  function renderResponse() {\n    if (isError) {\n      return errorMessage;\n    }\n    else if (isLoading) {\n      return 'Loading EC2 instances...';\n    }\n    else {\n      return (\n        <JsonViewer\n          jsonObject={results}\n          collapseStringsAfterLength={50}\n        />\n      );\n    }\n  }\n\n  return (\n    <Widget>\n      <h2>EC2 Instances:</h2>\n      <RegionSelector value={region} setFunction={setRegion}/><br/>\n      {renderResponse()}\n    </Widget>\n  );\n  \n};\n\nexport default Ec2DescribeInstances; ","import React, { useState } from 'react';\nimport Lambda from 'aws-sdk/clients/lambda';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport appStore from '../common/app-store.js';\nimport Widget from './widget.js';\n\nconst AwsCliProxy = ({ params }) => {\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(undefined);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [region, ] = useState('us-west-2');\n  const [cliCommand, setCliCommand] = useState('aws s3api list-buckets');\n  const [results, setResults] = useState(undefined);\n  const awsCliLambdaFunctionName = params.functionName;\n  \n  if (!awsCliLambdaFunctionName) {\n    console.log('Error: params.functionName parameter was not provided for AWS CLI Proxy widget');\n  }\n\n  async function invokeAwsCliProxy() {\n\n    var credentials = await appStore.Auth.currentCredentials();\n    var essentialCredentials = appStore.Auth.essentialCredentials(credentials);\n    const lambda = new Lambda({\n      region: region,\n      credentials: essentialCredentials\n    });\n    \n    var payload = {\n      commandToRun: cliCommand,\n      credentials: essentialCredentials\n    };\n\n    var params = {\n      FunctionName: awsCliLambdaFunctionName,\n      Payload: JSON.stringify(payload)\n    };\n    \n    console.log('Invoking CLI Lambda with params:', params);\n    \n    setIsLoading(true);\n    setIsError(false);\n    setIsLoaded(false);\n    setResults(undefined);\n\n    lambda.invoke(params, (err, data) => {\n      if (err) {\n        var errorMessage = `Failed to invoke AWS CLI proxy Lambda: ${err.name}`;\n        console.log(errorMessage);\n        setErrorMessage(errorMessage);\n        setIsError(true);\n        setResults(undefined);\n        setIsLoading(false);\n      }\n      else {\n        var response = JSON.parse(data.Payload);\n        console.log(`AWS CLI Proxy Lambda response:`, response);\n        setResults(response.commandResult);\n        setIsError(false);\n        setIsLoaded(true);\n      \n      }\n      setIsLoading(false);\n    });\n    \n  }\n\n  return (\n    <Widget>\n      <h2>AWS CLI Proxy</h2>\n      \n      <TextField\n        id=\"standard-basic\"\n        label=\"AWS CLI Command\"\n        value={cliCommand}\n        onChange={e => setCliCommand(e.target.value)} \n        fullWidth\n      />\n      <br />\n      <br/>\n      <Button variant=\"contained\" onClick={invokeAwsCliProxy}>Run command!</Button>\n      <br/>\n      <br/>\n      {isLoaded ? \n        <TextField\n        id=\"awsCliResponseTextField\"\n        label=\"CLI response\"\n        multiline\n        fullWidth\n        rowsMax={30}\n        style={{whiteSpace: 'pre-line'}}\n        value={results}\n        />\n        : null\n      }\n      {isLoading ? \"Waiting for response from Lambda CLI proxy...\" : null}\n      {isError ? errorMessage : null}\n    </Widget>\n  );\n};\n\nexport default AwsCliProxy; ","import React, { useState } from 'react';\nimport { view } from '@risingstack/react-easy-state';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport Footer from './footer.js';\nimport CustomAuthenticator from './auth/custom-authenticator';\nimport appStore from './common/app-store';\nimport useStyles from './common/material-ui-styles.js';\nimport Config from './common/config';\n\nimport UserInfo from './widgets/user-info';\nimport Ec2DescribeInstances from './widgets/ec2-describe-instances';\nimport AwsCliProxy from './widgets/aws-cli-proxy';\n\nconst Body = view(() => {\n\n  console.log(`authState = ${appStore.cognito.authState}`);\n\n  const loggedIn = (appStore.cognito.loggedIn);\n\n  return (\n    <React.Fragment>\n      {loggedIn ? <SignedInBody/> : <SignInBody/>}\n    </React.Fragment>\n  );\n});\n\n// If user is not signed in, display a login component for Cognito:\nconst SignInBody = view(() => {\n  const classes = useStyles();\n  return (\n    <main className={classes.content}>\n      <CustomAuthenticator displayType='login' updateAuthState={appStore.cognito.updateAuthState} />\n      <Footer/>\n    </main>\n  );\n});\n\n// If user is signed in, display the widget navigation side bar as well as the content of any selected widget(s):\nconst SignedInBody = view(() => {\n  \n  const classes = useStyles();\n\n  // This is the key parameter for UI display.\n  // For any widget that you want displayed in the left navigation, you should\n  // add an item to this array:\n  /*\n    const widgets = [\n      {\n        component: <COMPONENNT>     // the actual react functional component that you want to display\n        displayName: <STRING>       // name of widget that will display in the left app navigation\n        id: <STRING>                // arbitrary ID that we assign to component properties\n        displayOnFirstLoad: <BOOL>  // if true, widget will be displayed by default\n      }\n    ]\n\n  */\n  const widgets = [\n    {\n      component: UserInfo,\n      displayName: 'Cognito Info',\n      id: 'cognito-info',\n      displayOnFirstLoad: false\n    },\n    {\n      component: Ec2DescribeInstances,\n      displayName: 'EC2 Instances',\n      id: 'ec2-instances',\n      displayOnFirstLoad: false\n    },\n    {\n      component: AwsCliProxy,\n      displayName: 'Serverless AWS CLI',\n      id: 'serverless-cli',\n      displayOnFirstLoad: true,\n      params: {\n        functionName: Config.awsCliFunctionName\n      }\n      \n    },\n  ];\n\n  // initial state is 0 for everything\n  const defaultCheckboxStates = widgets.map(({displayOnFirstLoad}) => { return displayOnFirstLoad });\n  const [checkboxState, setCheckboxState] = useState(defaultCheckboxStates);\n\n  const handleToggle = (index) => {\n    console.log('handle toggle is: ', index);\n    const newCheckboxState = [...checkboxState];\n    if (newCheckboxState[index] === false) {\n      newCheckboxState[index] = true;\n    }\n    else {\n      newCheckboxState[index] = false;\n    }\n    setCheckboxState(newCheckboxState);\n  };\n\n  return (\n    <React.Fragment>\n      <AppDrawer widgets={widgets} handleToggle={handleToggle} checkboxState={checkboxState} />\n      <main className={classes.content}>\n        <Toolbar />\n        {/* ------- This is where you put the body after user is authenticated ---------*/}\n        {widgets.map((widget, index) => {\n          if (checkboxState[index] === true) {\n            \n            return React.createElement(widget.component, { key: widget.id, params: (widget.params || {}) });\n          }\n          else {\n            return null;\n          }\n        })}\n        {/* ----------------------------------------------------------------------------*/}\n        <Footer/>\n      </main>\n    </React.Fragment>\n  );\n});\n\n\n// This is the left navigation bar: \nconst AppDrawer = view(({widgets, handleToggle, checkboxState}) => {\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        open={true}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Toolbar />\n        <Container className={classes.drawerHeaderContainer}>\n          <Box m={1} >\n            <Typography variant=\"h6\">\n              Widgets\n            </Typography>\n          </Box>\n        </Container>\n\n        <div className={classes.drawerContainer}>\n          <List>\n            {widgets.map((widget, index) => {\n              const labelId = `checkbox-list-label-${widget.id}`;\n              return (\n                <ListItem key={widget.id} dense button onClick={() => handleToggle(index)}>\n                <ListItemIcon>\n                    <Checkbox\n                      edge=\"start\"\n                      checked={checkboxState[index]}\n                      tabIndex={-1}\n                      disableRipple\n                      key={`checkbox-${widget.id}`}\n                      inputProps={{ 'aria-labelledby': labelId }}\n                    />\n                  </ListItemIcon>\n                  <ListItemText key={labelId} primary={widget.displayName} />\n                </ListItem>\n              );\n            })}\n          </List>\n          <Divider />\n        </div>\n      </Drawer>\n    </React.Fragment>\n  );\n});\n\nexport default Body; ","import './App.css';\nimport React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Header from './components/header';\nimport Body from './components/body';\nimport useStyles from './components/common/material-ui-styles.js';\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Header />\n      <Body />\n    </div>\n  );\n}\n\nexport default view(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}